{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Geocode","setApiKey","enableDebug","LocationSearchModal","state","address","city","area","zoom","height","mapPosition","lat","lng","markerPosition","getCity","addressArray","i","length","types","long_name","getArea","j","getState","onChange","event","setState","target","name","value","onInfoWindowClose","onMarkerDragEnd","newLat","latLng","newLng","fromLatLng","then","response","results","formatted_address","address_components","error","console","onPlaceSelected","place","log","latValue","geometry","location","lngValue","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","AsyncMap","withScriptjs","withGoogleMap","props","defaultZoom","defaultCenter","google","draggable","onDragEnd","onClose","style","padding","margin","width","paddingLeft","marginTop","marginBottom","maxWidth","bordered","Item","label","this","googleMapURL","loadingElement","containerElement","mapElement","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.668c5b2d.chunk.js","sourcesContent":["import React from 'react';\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Geocode from \"react-geocode\";\nimport Autocomplete from 'react-google-autocomplete';\nimport { Descriptions } from 'antd';\n\n\n\nGeocode.setApiKey(\"AIzaSyBPw4j4K0XHmpgaJDOqZutp2Umt3NffghQ\");\nGeocode.enableDebug();\n\nclass LocationSearchModal extends React.Component {\n\n    state = {\n        address: '',\n        city: '',\n        area: '',\n        state: '',\n        zoom: 15,\n        height: 400,\n        mapPosition: {\n            lat: 0,\n            lng: 0,\n        },\n        markerPosition: {\n            lat: 0,\n            lng: 0,\n        }\n    }\n\n\n    componentDidMount() {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(position => {\n                this.setState({\n                    mapPosition: {\n                        lat: position.coords.latitude,\n                        lng: position.coords.longitude,\n                    },\n                    markerPosition: {\n                        lat: position.coords.latitude,\n                        lng: position.coords.longitude,\n                    }\n                },\n                    () => {\n                        Geocode.fromLatLng(position.coords.latitude, position.coords.longitude).then(\n                            response => {\n                                console.log(response)\n                                const address = response.results[0].formatted_address,\n                                    addressArray = response.results[0].address_components,\n                                    city = this.getCity(addressArray),\n                                    area = this.getArea(addressArray),\n                                    state = this.getState(addressArray);\n                                console.log('city', city, area, state);\n                                this.setState({\n                                    address: (address) ? address : '',\n                                    area: (area) ? area : '',\n                                    city: (city) ? city : '',\n                                    state: (state) ? state : '',\n                                })\n                            },\n                            error => {\n                                console.error(error);\n                            }\n                        );\n\n                    })\n            });\n        } else {\n            console.error(\"Geolocation is not supported by this browser!\");\n        }\n    };\n\n    // shouldComponentUpdate(nextProps, nextState, nextContext) {\n    //     if (\n    //         this.state.markerPosition.lat !== this.state.center.lat ||\n    //         this.state.address !== nextState.address ||\n    //         this.state.city !== nextState.city ||\n    //         this.state.area !== nextState.area ||\n    //         this.state.state !== nextState.state\n    //     ) {\n    //         return true\n    //     } else if (this.state.mapPosition.lat === nextState.mapPosition.lat) {\n    //         return false\n    //     }\n    // }\n\n    getCity = (addressArray) => {\n        let city = '';\n        for (let i = 0; i < addressArray.length; i++) {\n            if (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\n                city = addressArray[i].long_name;\n                return city;\n            }\n        }\n    };\n\n    getArea = (addressArray) => {\n        let area = '';\n        for (let i = 0; i < addressArray.length; i++) {\n            if (addressArray[i].types[0]) {\n                for (let j = 0; j < addressArray[i].types.length; j++) {\n                    if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\n                        area = addressArray[i].long_name;\n                        return area;\n                    }\n                }\n            }\n        }\n    };\n\n    getState = (addressArray) => {\n        let state = '';\n        for (let i = 0; i < addressArray.length; i++) {\n            for (let i = 0; i < addressArray.length; i++) {\n                if (addressArray[i].types[0] && 'administrative_area_level_1' === addressArray[i].types[0]) {\n                    state = addressArray[i].long_name;\n                    return state;\n                }\n            }\n        }\n    };\n\n    onChange = (event) => {\n        this.setState({ [event.target.name]: event.target.value });\n    };\n\n    onInfoWindowClose = (event) => { };\n\n    onMarkerDragEnd = (event) => {\n        let newLat = event.latLng.lat(),\n            newLng = event.latLng.lng();\n\n        Geocode.fromLatLng(newLat, newLng).then(\n            response => {\n                const address = response.results[0].formatted_address,\n                    addressArray = response.results[0].address_components,\n                    city = this.getCity(addressArray),\n                    area = this.getArea(addressArray),\n                    state = this.getState(addressArray);\n                this.setState({\n                    address: (address) ? address : '',\n                    area: (area) ? area : '',\n                    city: (city) ? city : '',\n                    state: (state) ? state : '',\n                    markerPosition: {\n                        lat: newLat,\n                        lng: newLng\n                    },\n                    mapPosition: {\n                        lat: newLat,\n                        lng: newLng\n                    },\n                })\n            },\n            error => {\n                console.error(error);\n            }\n        );\n    };\n\n    onPlaceSelected = (place) => {\n        console.log('plc', place);\n        const address = place.formatted_address,\n            addressArray = place.address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray),\n            latValue = place.geometry.location.lat(),\n            lngValue = place.geometry.location.lng();\n\n        console.log('latvalue', latValue)\n        console.log('lngValue', lngValue)\n\n        // Set these values in the state.\n        this.setState({\n            address: (address) ? address : '',\n            area: (area) ? area : '',\n            city: (city) ? city : '',\n            state: (state) ? state : '',\n            markerPosition: {\n                lat: latValue,\n                lng: lngValue\n            },\n            mapPosition: {\n                lat: latValue,\n                lng: lngValue\n            },\n        })\n    };\n\n    // const AsyncMap = compose(\n    //     withProps({\n    //         googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyALVjLwOIM1gf7EzdJJVmWLKdLP-yZGTcw&v=3.exp&libraries=geometry,drawing,places\",\n    //         loadingElement: <div style={{ height: `100%` }} />,\n    //         containerElement: <div style={{ height: `400px` }} />,\n    //         mapElement: <div style={{ height: `100%` }} />,\n    //     }),\n    //     withScriptjs,\n    //     withGoogleMap\n    // )((props) =>\n    //     <GoogleMap\n\n    render() {\n        const AsyncMap = withScriptjs(\n            withGoogleMap(\n                props => (\n                    <GoogleMap\n                        defaultZoom={this.state.zoom}\n                        defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\n                    >\n                        {/* InfoWindow on top of marker */}\n\n                        {/*Marker*/}\n                        <Marker\n                            google={this.props.google}\n                            name={'Dolores park'}\n                            draggable={true}\n                            onDragEnd={this.onMarkerDragEnd}\n                            position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\n                        />\n                        <InfoWindow\n                            onClose={this.onInfoWindowClose}\n                            position={{ lat: (this.state.markerPosition.lat + 0.0018), lng: this.state.markerPosition.lng }}\n                        >\n                            <div>\n                                <span style={{ padding: 0, margin: 0 }}>{this.state.address}</span>\n                            </div>\n                        </InfoWindow>\n                        <Marker />\n\n                      \n\n\n                        {/* For Auto complete Search Box */}\n                        <Autocomplete\n                            style={{\n                                width: '100%',\n                                height: '40px',\n                                paddingLeft: '16px',\n                                marginTop: '2px',\n                                marginBottom: '2rem'\n                            }}\n                            onPlaceSelected={this.onPlaceSelected}\n                            types={['(regions)']}\n                        />\n                    </GoogleMap>\n                )\n            )\n        );\n\n        return (\n            <div style={{ padding: '1rem', margin: '0 auto', maxWidth: 1000 }}>\n                <h1>Google Map Basic</h1>\n                <Descriptions bordered>\n                    <Descriptions.Item label=\"City\">{this.state.city}</Descriptions.Item>\n                    <Descriptions.Item label=\"Area\">{this.state.area}</Descriptions.Item>\n                    <Descriptions.Item label=\"State\">{this.state.state}</Descriptions.Item>\n                    <Descriptions.Item label=\"Address\">{this.state.address}</Descriptions.Item>\n                </Descriptions>\n\n                <AsyncMap\n                    googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyBPw4j4K0XHmpgaJDOqZutp2Umt3NffghQ&libraries=places\"\n                    loadingElement={\n                        <div style={{ height: `100%` }} />\n                    }\n                    containerElement={\n                        <div style={{ height: this.state.height }} />\n                    }\n                    mapElement={\n                        <div style={{ height: `100%` }} />\n                    }\n                />\n            </div>\n        )\n    }\n\n}\n\nexport default LocationSearchModal;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'antd/dist/antd.css'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}